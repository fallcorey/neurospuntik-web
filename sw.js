const CACHE_NAME = 'neuro-sputnik-v1.0.0';
const RUNTIME_CACHE = 'runtime-cache';

// –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const PRECACHE_URLS = [
    '/',
    '/index.html',
    '/manifest.json',
    '/ollama-engine/ollama-web.js',
    '/ollama-engine/engine.js',
    '/games/memory-game.html',
    '/games/quiz-game.html',
    '/games/coding-game.html',
    '/learning/dataset-builder.js',
    '/learning/model-trainer.js',
    '/resources/models/tiny-llama.json',
    '/resources/icons/icon-192.png',
    '/resources/icons/icon-512.png'
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
    console.log('üõ†Ô∏è Service Worker —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(cache => {
                console.log('üì¶ –ö—ç—à–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
                return cache.addAll(PRECACHE_URLS);
            })
            .then(() => self.skipWaiting())
    );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
    console.log('üöÄ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheName !== CACHE_NAME && cacheName !== RUNTIME_CACHE) {
                        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        }).then(() => self.clients.claim())
    );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ö–µ–º—ã
    if (!event.request.url.startsWith('http')) {
        return;
    }

    event.respondWith(
        caches.match(event.request)
            .then(cachedResponse => {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π response –µ—Å–ª–∏ –µ—Å—Ç—å
                if (cachedResponse) {
                    return cachedResponse;
                }

                // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
                return caches.open(RUNTIME_CACHE).then(cache => {
                    return fetch(event.request).then(response => {
                        // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                        if (response.status === 200) {
                            cache.put(event.request, response.clone());
                        }
                        return response;
                    }).catch(error => {
                        // Fallback –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
                        console.log('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à:', error);
                        return new Response(JSON.stringify({
                            error: '–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º',
                            message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'
                        }), {
                            headers: { 'Content-Type': 'application/json' }
                        });
                    });
                });
            })
    );
});

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
self.addEventListener('sync', event => {
    if (event.tag === 'background-sync') {
        console.log('üîÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è');
        event.waitUntil(syncLearningData());
    }
});

async function syncLearningData() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
    // –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è...');
}
