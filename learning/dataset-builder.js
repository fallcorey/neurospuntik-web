class DatasetBuilder {
    constructor() {
        this.conversations = [];
        this.gameData = [];
        this.userPreferences = {};
        this.learningSessions = [];
        this.maxStorage = 50 * 1024 * 1024; // 50MB –º–∞–∫—Å–∏–º—É–º
    }
    
    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–∞—Ç–∞
    recordConversation(userMessage, aiResponse, context) {
        const conversation = {
            timestamp: Date.now(),
            user_message: userMessage,
            ai_response: aiResponse,
            context: context,
            metadata: {
                message_length: userMessage.length,
                response_length: aiResponse.length,
                topic: this.analyzeTopic(userMessage),
                sentiment: this.analyzeSentiment(userMessage)
            }
        };
        
        this.conversations.push(conversation);
        this.checkStorageLimit();
        
        console.log('üí¨ –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞—Ç–∞—Å–µ—Ç');
    }
    
    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–≥—Ä
    recordGameData(gameType, performance, decisions, outcome) {
        const gameSession = {
            timestamp: Date.now(),
            game_type: gameType,
            performance: performance,
            decisions: decisions,
            outcome: outcome,
            learning_metrics: this.calculateLearningMetrics(performance)
        };
        
        this.gameData.push(gameSession);
        this.checkStorageLimit();
        
        console.log(`üéÆ –ó–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã: ${gameType}`);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    analyzeTopic(message) {
        const topics = {
            programming: ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'python', 'javascript', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø–µ—Ä–µ–º–µ–Ω–Ω'],
            science: ['–Ω–∞—É–∫', '—Ñ–∏–∑–∏–∫', '—Ö–∏–º–∏', '–±–∏–æ–ª–æ–≥', '–º–∞—Ç–µ–º–∞—Ç', '—Ç–µ–æ—Ä–∏—è'],
            learning: ['–æ–±—É—á', '–∏–∑—É—á', '–∫—É—Ä—Å', '—É—á–µ–±', '–∑–∞–Ω—è—Ç–∏'],
            creative: ['–∏–¥–µ—è', '–ø—Ä–∏–¥—É–º–∞–π', '—Å–æ–∑–¥–∞–π', '–∫—Ä–µ–∞—Ç–∏–≤', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤'],
            technical: ['—Ç–µ—Ö–Ω–∏–∫', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏', '–Ω–∞—Å—Ç—Ä–æ–π–∫']
        };
        
        const lowerMessage = message.toLowerCase();
        for (const [topic, keywords] of Object.entries(topics)) {
            if (keywords.some(keyword => lowerMessage.includes(keyword))) {
                return topic;
            }
        }
        
        return 'general';
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    analyzeSentiment(message) {
        const positiveWords = ['—Ö–æ—Ä–æ—à', '–æ—Ç–ª–∏—á–Ω', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω', '—Å–ø–∞—Å–∏–±', '–ø–æ–Ω—Ä–∞–≤', '–ª—é–±'];
        const negativeWords = ['–ø–ª–æ—Ö', '—É–∂–∞—Å–Ω', '–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω', '–Ω–µ–Ω–∞–≤–∏–∂', '–≥—Ä—É—Å—Ç–Ω', '–∑–ª', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω'];
        
        const lowerMessage = message.toLowerCase();
        let score = 0;
        
        positiveWords.forEach(word => {
            if (lowerMessage.includes(word)) score++;
        });
        
        negativeWords.forEach(word => {
            if (lowerMessage.includes(word)) score--;
        });
        
        return score > 0 ? 'positive' : score < 0 ? 'negative' : 'neutral';
    }
    
    // –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è –∏–∑ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    calculateLearningMetrics(performance) {
        return {
            accuracy: performance.accuracy || 0,
            speed: performance.speed || 0,
            consistency: performance.consistency || 0,
            improvement_rate: this.calculateImprovementRate(performance),
            attention_span: this.calculateAttentionSpan(performance)
        };
    }
    
    calculateImprovementRate(performance) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        const recentSessions = this.gameData.slice(-5);
        if (recentSessions.length < 2) return 0;
        
        const improvements = recentSessions.map(session => 
            session.learning_metrics?.accuracy || 0
        );
        
        const totalImprovement = improvements[improvements.length - 1] - improvements[0];
        return totalImprovement / (improvements.length - 1);
    }
    
    calculateAttentionSpan(performance) {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è
        return Math.min(100, (performance.focusTime || 0) / 60 * 100);
    }
    
    // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    prepareTrainingData() {
        const trainingExamples = [];
        
        // –î–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞
        this.conversations.forEach(conv => {
            trainingExamples.push({
                input: conv.user_message,
                output: conv.ai_response,
                context: conv.context,
                weight: this.calculateExampleWeight(conv)
            });
        });
        
        // –î–∞–Ω–Ω—ã–µ –∏–∑ –∏–≥—Ä
        this.gameData.forEach(game => {
            trainingExamples.push({
                input: `–ò–≥—Ä–∞: ${game.game_type}. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${game.outcome}`,
                output: this.generateGameLearningOutput(game),
                context: 'game_learning',
                weight: game.learning_metrics.accuracy
            });
        });
        
        return trainingExamples;
    }
    
    calculateExampleWeight(conversation) {
        let weight = 1.0;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (conversation.metadata.message_length > 50) weight *= 1.2;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö/–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
        if (['programming', 'science', 'technical'].includes(conversation.metadata.topic)) {
            weight *= 1.5;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if (conversation.metadata.sentiment === 'negative') {
            weight *= 0.7;
        }
        
        return Math.min(weight, 2.0); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å 2.0
    }
    
    generateGameLearningOutput(gameSession) {
        const metrics = gameSession.learning_metrics;
        return `–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–≥—Ä—ã "${gameSession.game_type}" —è —É–ª—É—á—à–∏–ª: —Ç–æ—á–Ω–æ—Å—Ç—å ${metrics.accuracy}%, —Å–∫–æ—Ä–æ—Å—Ç—å ${metrics.speed}%, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è ${metrics.attention_span}%`;
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    checkStorageLimit() {
        const totalSize = this.getTotalDataSize();
        
        if (totalSize > this.maxStorage) {
            this.cleanupOldData();
        }
    }
    
    getTotalDataSize() {
        const dataString = JSON.stringify({
            conversations: this.conversations,
            gameData: this.gameData
        });
        
        return new Blob([dataString]).size;
    }
    
    cleanupOldData() {
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 20% –¥–∞–Ω–Ω—ã—Ö
        const conversationsToKeep = Math.floor(this.conversations.length * 0.8);
        const gamesToKeep = Math.floor(this.gameData.length * 0.8);
        
        this.conversations = this.conversations.slice(-conversationsToKeep);
        this.gameData = this.gameData.slice(-gamesToKeep);
        
        console.log('üßπ –û—á–∏—â–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞');
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    exportDataset() {
        const dataset = {
            conversations: this.conversations,
            gameData: this.gameData,
            userPreferences: this.userPreferences,
            metadata: {
                total_examples: this.conversations.length + this.gameData.length,
                export_date: new Date().toISOString(),
                version: '1.0'
            }
        };
        
        const dataStr = JSON.stringify(dataset, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        return URL.createObjectURL(dataBlob);
    }
    
    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    importDataset(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    this.conversations = importedData.conversations || [];
                    this.gameData = importedData.gameData || [];
                    this.userPreferences = importedData.userPreferences || {};
                    
                    console.log('üì• –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
                    resolve(true);
                } catch (error) {
                    reject(new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞'));
                }
            };
            
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsText(file);
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.DatasetBuilder = DatasetBuilder;
