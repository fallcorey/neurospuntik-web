// WebAssembly –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Ollama
class OllamaWebEngine {
    constructor() {
        this.isInitialized = false;
        this.isRunning = false;
        this.currentModel = null;
        this.models = {};
        this.memoryLimit = 512 * 1024 * 1024; // 512MB –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    }

    async initialize() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebAssembly Ollama...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º WebAssembly –º–æ–¥—É–ª—å
            if (!WebAssembly.instantiateStreaming) {
                console.log('‚ö†Ô∏è WebAssembly streaming –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                return false;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WASM –º–æ–¥—É–ª—å Ollama
            const wasmResponse = await fetch('resources/ollama/ollama.wasm');
            const wasmBytes = await wasmResponse.arrayBuffer();
            const wasmModule = await WebAssembly.instantiate(wasmBytes, {
                env: {
                    memory: new WebAssembly.Memory({ initial: 256 }),
                    abort: () => console.log('WASM abort')
                }
            });

            this.instance = wasmModule.instance;
            this.isInitialized = true;
            
            console.log('‚úÖ WebAssembly Ollama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebAssembly:', error);
            return false;
        }
    }

    async loadModel(modelName, modelData) {
        if (!this.isInitialized) {
            throw new Error('–î–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: ${modelName}`);
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç—å WASM
            const modelBuffer = new Uint8Array(modelData);
            const modelPtr = this._allocateMemory(modelBuffer.length);
            
            // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ WASM –ø–∞–º—è—Ç—å
            const wasmMemory = new Uint8Array(this.instance.exports.memory.buffer);
            wasmMemory.set(modelBuffer, modelPtr);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ Ollama
            const result = this.instance.exports.load_model(
                modelPtr, 
                modelBuffer.length,
                this.memoryLimit
            );
            
            if (result === 0) {
                this.currentModel = modelName;
                this.models[modelName] = {
                    loaded: true,
                    size: modelBuffer.length
                };
                
                console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
                return true;
            } else {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: –∫–æ–¥ ${result}`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName}:`, error);
            return false;
        }
    }

    async generateResponse(prompt, options = {}) {
        if (!this.currentModel) {
            throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }

        const {
            maxTokens = 500,
            temperature = 0.7,
            topP = 0.9
        } = options;

        console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...');

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            const promptBuffer = new TextEncoder().encode(prompt);
            const promptPtr = this._allocateMemory(promptBuffer.length);
            
            const wasmMemory = new Uint8Array(this.instance.exports.memory.buffer);
            wasmMemory.set(promptBuffer, promptPtr);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            const responsePtr = this.instance.exports.generate_response(
                promptPtr,
                promptBuffer.length,
                maxTokens,
                temperature,
                topP
            );

            if (responsePtr === 0) {
                throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞');
            }

            // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ WASM –ø–∞–º—è—Ç–∏
            const response = this._readStringFromMemory(responsePtr);
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            this.instance.exports.free_memory(responsePtr);
            this.instance.exports.free_memory(promptPtr);

            return response;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async trainOnData(trainingData, epochs = 1) {
        if (!this.currentModel) {
            throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }

        console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ ${trainingData.length} –ø—Ä–∏–º–µ—Ä–∞—Ö`);

        try {
            const trainingJson = JSON.stringify(trainingData);
            const trainingBuffer = new TextEncoder().encode(trainingJson);
            const trainingPtr = this._allocateMemory(trainingBuffer.length);

            const wasmMemory = new Uint8Array(this.instance.exports.memory.buffer);
            wasmMemory.set(trainingBuffer, trainingPtr);

            const result = this.instance.exports.train_model(
                trainingPtr,
                trainingBuffer.length,
                epochs
            );

            this.instance.exports.free_memory(trainingPtr);

            if (result === 0) {
                console.log('‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                return true;
            } else {
                throw new Error(`–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: –∫–æ–¥ ${result}`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    _allocateMemory(size) {
        return this.instance.exports.allocate_memory(size);
    }

    _readStringFromMemory(ptr) {
        const memory = new Uint8Array(this.instance.exports.memory.buffer);
        let length = 0;
        
        // –ù–∞—Ö–æ–¥–∏–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (null-terminated)
        while (memory[ptr + length] !== 0) {
            length++;
        }
        
        // –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
        const stringBytes = memory.slice(ptr, ptr + length);
        return new TextDecoder().decode(stringBytes);
    }

    getMemoryUsage() {
        if (!this.isInitialized) return 0;
        
        const used = this.instance.exports.get_used_memory();
        const total = this.instance.exports.get_total_memory();
        
        return {
            used: Math.round(used / 1024 / 1024),
            total: Math.round(total / 1024 / 1024),
            percentage: Math.round((used / total) * 100)
        };
    }

    async saveModel(modelName) {
        if (!this.currentModel) {
            throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }

        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å: ${modelName}`);

        try {
            const modelSize = this.instance.exports.get_model_size();
            const modelPtr = this.instance.exports.export_model();
            
            const wasmMemory = new Uint8Array(this.instance.exports.memory.buffer);
            const modelData = wasmMemory.slice(modelPtr, modelPtr + modelSize);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
            await this._saveToIndexedDB(modelName, modelData);
            
            this.instance.exports.free_memory(modelPtr);
            
            console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
            return false;
        }
    }

    async _saveToIndexedDB(key, data) {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('NeuroSputnikModels', 1);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                const db = request.result;
                const transaction = db.transaction(['models'], 'readwrite');
                const store = transaction.objectStore('models');
                
                const putRequest = store.put(data, key);
                putRequest.onsuccess = () => resolve();
                putRequest.onerror = () => reject(putRequest.error);
            };
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                db.createObjectStore('models');
            };
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.OllamaWebEngine = OllamaWebEngine;
