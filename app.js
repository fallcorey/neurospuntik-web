// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NeuroSputnik Android
class NeuroSputnikApp {
    constructor() {
        this.ollamaEngine = null;
        this.datasetBuilder = null;
        this.currentTab = 'chat';
        this.isInitialized = false;
        this.conversationHistory = [];
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NeuroSputnik Android...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initializeComponents();
            this.setupEventListeners();
            this.setupUI();
            this.loadUserData();
            
            this.isInitialized = true;
            console.log('‚úÖ NeuroSputnik Android –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
            
            this.showWelcomeMessage();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É WebAssembly.');
        }
    }
    
    async initializeComponents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ Ollama
        this.ollamaEngine = new OllamaWebEngine();
        const engineReady = await this.ollamaEngine.initialize();
        
        if (!engineReady) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI –¥–≤–∏–∂–æ–∫');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        this.datasetBuilder = new DatasetBuilder();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
        await this.loadBaseModel();
    }
    
    async loadBaseModel() {
        try {
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å tiny-llama –º–æ–¥–µ–ª—å
            const modelResponse = await fetch('resources/models/tiny-llama.json');
            const modelData = await modelResponse.json();
            
            await this.ollamaEngine.loadModel('tiny-llama', modelData);
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        }
    }
    
    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        document.getElementById('sendBtn').addEventListener('click', () => {
            this.sendMessage();
        });
        
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä
        this.setupGamesNavigation();
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        this.setupStorageMonitoring();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        window.addEventListener('online', this.handleOnlineStatus.bind(this));
        window.addEventListener('offline', this.handleOfflineStatus.bind(this));
    }
    
    setupGamesNavigation() {
        document.querySelectorAll('.game-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const game = e.currentTarget.dataset.game;
                this.openGame(game);
            });
        });
    }
    
    setupStorageMonitoring() {
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        setInterval(() => {
            this.updateStorageStatus();
        }, 30000);
        
        this.updateStorageStatus();
    }
    
    setupUI() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.updateBatteryStatus();
        this.setupSwipeNavigation();
    }
    
    setupSwipeNavigation() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–∞–π–ø-–Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let touchStartX = 0;
        let touchEndX = 0;
        
        document.addEventListener('touchstart', (e) => {
            touchStartX = e.changedTouches[0].screenX;
        });
        
        document.addEventListener('touchend', (e) => {
            touchEndX = e.changedTouches[0].screenX;
            this.handleSwipe(touchStartX, touchEndX);
        });
    }
    
    handleSwipe(startX, endX) {
        const swipeThreshold = 50;
        const diff = startX - endX;
        
        if (Math.abs(diff) > swipeThreshold) {
            const tabs = ['chat', 'games', 'learn', 'models'];
            const currentIndex = tabs.indexOf(this.currentTab);
            
            if (diff > 0 && currentIndex < tabs.length - 1) {
                // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è –≤–∫–ª–∞–¥–∫–∞
                this.switchTab(tabs[currentIndex + 1]);
            } else if (diff < 0 && currentIndex > 0) {
                // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞
                this.switchTab(tabs[currentIndex - 1]);
            }
        }
    }
    
    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tabName);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.toggle('active', content.id === tabName);
        });
        
        this.currentTab = tabName;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        if (tabName === 'models') {
            this.loadModelsList();
        } else if (tabName === 'learn') {
            this.updateLearningStatus();
        }
    }
    
    async sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();
        
        if (!message) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.addMessage(message, 'user');
        input.value = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        const thinkingId = this.showThinkingIndicator();
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Ollama
            const context = this.getConversationContext();
            const response = await this.generateAIResponse(message, context);
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            this.removeThinkingIndicator(thinkingId);
            this.addMessage(response, 'neuro');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–∞—Ç–∞—Å–µ—Ç
            this.saveToHistory(message, response);
            this.datasetBuilder.recordConversation(message, response, context);
            
        } catch (error) {
            this.removeThinkingIndicator(thinkingId);
            this.addMessage(this.getFallbackResponse(message), 'neuro');
        }
    }
    
    async generateAIResponse(message, context) {
        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.ollamaEngine && this.ollamaEngine.currentModel) {
            try {
                const prompt = this.buildPrompt(message, context);
                return await this.ollamaEngine.generateResponse(prompt, {
                    maxTokens: 500,
                    temperature: 0.7
                });
            } catch (error) {
                console.warn('Ollama –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            }
        }
        
        // Fallback –æ—Ç–≤–µ—Ç—ã
        return this.getSmartResponse(message);
    }
    
    buildPrompt(message, context) {
        return `–¢—ã - NeuroSputnik, —É–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –Ω–∞ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è:
${context}

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}

–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
- –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
- –ò–≥—Ä—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏
- –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∏ —Ç–æ—á–Ω–æ:`;
    }
    
    getSmartResponse(message) {
        const lowerMsg = message.toLowerCase();
        
        const smartResponses = {
            '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! üéâ –Ø NeuroSputnik - —Ç–≤–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω AI –ø–æ–º–æ—â–Ω–∏–∫. –†–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!',
            '–∫–∞–∫ –¥–µ–ª–∞': '–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –æ–±—â–µ–Ω–∏—é –∏ –æ–±—É—á–µ–Ω–∏—é. –ú–æ–∂–µ—à—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —á—ë–º —É–≥–æ–¥–Ω–æ –∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã!',
            '–æ—Ñ—Ñ–ª–∞–π–Ω': '–î–∞! –Ø —Ä–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω. –í—Å–µ AI –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Ç–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.',
            '–æ–±—É—á–µ–Ω–∏–µ': '–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –∏ –∏–≥—Ä–∞—Ö. –ß–µ–º –±–æ–ª—å—à–µ –º—ã –æ–±—â–∞–µ–º—Å—è - —Ç–µ–º —É–º–Ω–µ–µ —è —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å! üß†',
            '–∏–≥—Ä—ã': '–í–æ –≤–∫–ª–∞–¥–∫–µ "üéÆ –ò–≥—Ä—ã" –Ω–∞–π–¥—ë—à—å –º–Ω–æ–≥–æ –æ–±—É—á–∞—é—â–∏—Ö –∏–≥—Ä –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–µ–≥–æ AI!',
            '–ø–∞–º—è—Ç—å': '–°—ã–≥—Ä–∞–π –≤ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–∞–º—è—Ç–∏" —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ —É–ª—É—á—à–∏—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!'
        };
        
        for (const [key, response] of Object.entries(smartResponses)) {
            if (lowerMsg.includes(key)) {
                return response;
            }
        }
        
        return `ü§î "${message}" - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!

–Ø —Ä–∞–±–æ—Ç–∞—é –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, –Ω–æ –º–æ–≥—É:
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –°—ã–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –æ–±—É—á–∞—é—â–∏–µ –∏–≥—Ä—ã

–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∑–∞–π–¥–∏ –≤ –∏–≥—Ä—ã –¥–ª—è –º–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üöÄ`;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏
    openGame(gameName) {
        const gameUrls = {
            'memory': 'games/memory-game.html',
            'quiz': 'games/quiz-game.html',
            'coding': 'games/coding-game.html',
            'language': 'games/language-game.html',
            'logic': 'games/logic-game.html',
            'creative': 'games/creative-game.html'
        };
        
        const gameUrl = gameUrls[gameName];
        if (gameUrl) {
            window.open(gameUrl, '_self');
        } else {
            alert('–ò–≥—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üõ†Ô∏è');
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI
    async startTraining() {
        const trainingData = this.datasetBuilder.prepareTrainingData();
        
        if (trainingData.length === 0) {
            alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–æ–±—â–∞–π—Å—è –∏–ª–∏ –ø–æ–∏–≥—Ä–∞–π!');
            return;
        }
        
        this.updateTrainingProgress(0, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Ollama
            const formattedData = this.formatTrainingData(trainingData);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
            const success = await this.ollamaEngine.trainOnData(formattedData, 3);
            
            if (success) {
                this.updateTrainingProgress(100, '–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
                alert('‚úÖ AI —É—Å–ø–µ—à–Ω–æ –¥–æ–æ–±—É—á–µ–Ω –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!');
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ AI');
        }
    }
    
    formatTrainingData(trainingData) {
        return trainingData.map(example => ({
            input: example.input,
            output: example.output,
            weight: example.weight
        }));
    }
    
    updateTrainingProgress(percent, message) {
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('trainingProgress');
        
        if (progressBar) progressBar.style.width = percent + '%';
        if (progressText) progressText.textContent = message;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã UI
    addMessage(text, type) {
        const messagesDiv = document.getElementById('messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}-message`;
        messageDiv.innerHTML = `<strong>${type === 'user' ? '–í—ã' : 'NeuroSputnik'}:</strong> ${this.formatMessage(text)}`;
        messagesDiv.appendChild(messageDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
    
    formatMessage(text) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return text.replace(/\n/g, '<br>')
                  .replace(/\*(.*?)\*/g, '<strong>$1</strong>')
                  .replace(/_(.*?)_/g, '<em>$1</em>');
    }
    
    showThinkingIndicator() {
        const messagesDiv = document.getElementById('messages');
        const thinkingDiv = document.createElement('div');
        thinkingDiv.className = 'message neuro-message';
        thinkingDiv.id = 'thinkingMsg';
        thinkingDiv.innerHTML = '<strong>NeuroSputnik:</strong> <em>–ø–µ—á–∞—Ç–∞–µ—Ç...</em>';
        messagesDiv.appendChild(thinkingDiv);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
        return 'thinkingMsg';
    }
    
    removeThinkingIndicator(id) {
        const element = document.getElementById(id);
        if (element) element.remove();
    }
    
    getConversationContext() {
        return this.conversationHistory.slice(-3).map(msg => 
            `${msg.role}: ${msg.content}`
        ).join('\n');
    }
    
    saveToHistory(userMessage, aiResponse) {
        this.conversationHistory.push(
            { role: 'user', content: userMessage },
            { role: 'assistant', content: aiResponse }
        );
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if (this.conversationHistory.length > 20) {
            this.conversationHistory = this.conversationHistory.slice(-20);
        }
        
        this.saveToStorage('conversation_history', this.conversationHistory);
    }
    
    // –†–∞–±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    saveToStorage(key, data) {
        try {
            localStorage.setItem(key, JSON.stringify(data));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage:', error);
        }
    }
    
    loadFromStorage(key) {
        try {
            const data = localStorage.getItem(key);
            return data ? JSON.parse(data) : null;
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage:', error);
            return null;
        }
    }
    
    loadUserData() {
        this.conversationHistory = this.loadFromStorage('conversation_history') || [];
        this.loadConversationHistory();
    }
    
    loadConversationHistory() {
        this.conversationHistory.forEach(msg => {
            if (msg.role === 'user') {
                this.addMessage(msg.content, 'user');
            } else if (msg.role === 'assistant') {
                this.addMessage(msg.content, 'neuro');
            }
        });
    }
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    updateStorageStatus() {
        try {
            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            let totalSize = 0;
            
            for (let key in localStorage) {
                if (localStorage.hasOwnProperty(key)) {
                    totalSize += localStorage[key].length * 2; // –ü—Ä–∏–º–µ—Ä–Ω–æ –≤ –±–∞–π—Ç–∞—Ö
                }
            }
            
            const usedMB = Math.round(totalSize / 1024 / 1024);
            document.getElementById('storageStatus').textContent = `üíæ ${usedMB}MB`;
            
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        }
    }
    
    updateBatteryStatus() {
        if ('getBattery' in navigator) {
            navigator.getBattery().then(battery => {
                const updateBatteryInfo = () => {
                    const percentage = Math.round(battery.level * 100);
                    document.getElementById('batteryStatus').textContent = `üîã ${percentage}%`;
                };
                
                battery.addEventListener('levelchange', updateBatteryInfo);
                updateBatteryInfo();
            });
        }
    }
    
    handleOnlineStatus() {
        document.getElementById('aiStatus').textContent = 'üü¢ AI –∞–∫—Ç–∏–≤–µ–Ω (–æ–Ω–ª–∞–π–Ω)';
    }
    
    handleOfflineStatus() {
        document.getElementById('aiStatus').textContent = 'üü¢ AI –∞–∫—Ç–∏–≤–µ–Ω (–æ—Ñ—Ñ–ª–∞–π–Ω)';
    }
    
    showWelcomeMessage() {
        this.addMessage(
            'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroSputnik Android! ' +
            '–Ø —Ä–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω –∏ –º–æ–≥—É —Å–∞–º–æ–æ–±—É—á–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –∏–≥—Ä—ã. ' +
            '–ü–æ–ø—Ä–æ–±—É–π –≤–∫–ª–∞–¥–∫—É "üéÆ –ò–≥—Ä—ã" –¥–ª—è –º–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è!', 
            'neuro'
        );
    }
    
    showError(message) {
        this.addMessage(`‚ùå ${message}`, 'neuro');
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –º–æ–¥–µ–ª–µ–π
    async loadModelsList() {
        const loader = document.getElementById('modelsLoader');
        const modelsList = document.getElementById('modelsList');
        
        if (!this.ollamaEngine) return;
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            const models = this.ollamaEngine.models;
            
            if (Object.keys(models).length === 0) {
                modelsList.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <h3>ü§ñ –ú–æ–¥–µ–ª–∏ AI</h3>
                        <p>–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</p>
                        <button class="send-btn" onclick="app.downloadAdditionalModel()" style="margin: 10px 0;">
                            üì• –°–∫–∞—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                        </button>
                    </div>
                `;
            } else {
                modelsList.innerHTML = Object.keys(models).map(model => `
                    <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; margin: 10px 0;">
                        <h4>${model}</h4>
                        <p>–†–∞–∑–º–µ—Ä: ${Math.round(models[model].size / 1024 / 1024)}MB</p>
                        <p>–°—Ç–∞—Ç—É—Å: ${models[model].loaded ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}</p>
                    </div>
                `).join('');
            }
            
            loader.style.display = 'none';
            modelsList.style.display = 'block';
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
        }
    }
    
    updateLearningStatus() {
        const trainingData = this.datasetBuilder.prepareTrainingData();
        
        document.getElementById('dataCount').textContent = trainingData.length;
        document.getElementById('epochCount').textContent = '0'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —ç–ø–æ—Ö
        document.getElementById('accuracy').textContent = '0%'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async function startTraining() {
    if (window.app) {
        await window.app.startTraining();
    }
}

function exportModel() {
    alert('üíæ –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.app = new NeuroSputnikApp();
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
            })
            .catch(error => {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
            });
    });
}
